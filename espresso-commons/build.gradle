/*
 * Copyright (C) 2017 TOYAMA Sumio <jun.nama@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

group = rootProject.ext.GROUP_ID
version = rootProject.ext.PUBLISH_VERSION

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'


android {
    compileSdkVersion 25
    buildToolsVersion rootProject.ext.BUILD_TOOLS_VERSION

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 1
        versionName rootProject.ext.PUBLISH_VERSION
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_6
        targetCompatibility JavaVersion.VERSION_1_6
    }
    lintOptions {
        disable 'InvalidPackage'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile("com.android.support.test.espresso:espresso-core:${rootProject.ext.ESPRESSO_VERSION}") {
        exclude group: 'com.android.support'
    }
    compile("com.android.support.test.espresso:espresso-contrib:${rootProject.ext.ESPRESSO_VERSION}") {
        exclude group: 'com.android.support'
    }
    compile "com.android.support:recyclerview-v7:${rootProject.ext.SUPPORT_LIBRARY_VERSION}"
}


bintray {
    user = bintrayUser
    key = bintrayKey

    configurations = ['archives'] //When uploading configuration files
    pkg {
        repo = 'maven'
        name = project.name
        desc = rootProject.ext.DESCRIPTION
        websiteUrl = rootProject.ext.SITE_URL
        issueTrackerUrl = "${rootProject.ext.SITE_URL}/issues"
        vcsUrl = rootProject.ext.GIT_URL
        licenses = ['Apache-2.0']
    }
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'
                name project.name
                url rootProject.ext.SITE_URL
                licenses {
                    license {
                        name rootProject.ext.LICENSE
                        url rootProject.ext.LICENSE_URL
                    }
                }
                developers {
                    developer {
                        id rootProject.ext.DEVELOPER_ID
                        name rootProject.ext.DEVELOPER_NAME
                        email rootProject.ext.DEVELOPER_EMAIL
                    }
                }
                scm {
                    url rootProject.ext.GIT_URL
                    connection rootProject.ext.GIT_URL
                    developerConnection rootProject.ext.GIT_URL
                }
            }
        }
    }
}

android.libraryVariants.all { variant ->
    if (variant.name != "release") {
        return
    }
    def javadocTaskName = "javadoc${variant.name.capitalize()}";
    task(javadocTaskName, type: Javadoc) {
        description "Generates Javadoc for ${variant.name}."
        variant.sourceSets.each {
            delegate.source it.java.srcDirs
        }
        destinationDir = reporting.file("${variant.name}-docs")
        classpath += project.files(project.android.getBootClasspath().join(File.pathSeparator))
        classpath += variant.javaCompile.classpath
        classpath += variant.javaCompile.outputs.files
        options.encoding = 'UTF-8'
        options.locale = 'en'
    }
    task("javadocsJar${variant.name.capitalize()}", type: Jar, dependsOn: tasks[javadocTaskName]) {
        classifier = "javadoc"
        from tasks[javadocTaskName].destinationDir
    }
    task("sourcesJar${variant.name.capitalize()}", type: Jar) {
        classifier = "sources"
        variant.sourceSets.each {
            from it.java.srcDirs
        }
    }

    artifacts {
        archives tasks["javadocsJar${variant.name.capitalize()}"]
        archives tasks["sourcesJar${variant.name.capitalize()}"]
    }
}

task findConventions << {
    println project.getConvention()
}